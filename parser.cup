/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            LPAREN, RPAREN, LCURLBRACKET, RCURLBRACKET, IDENT, COMMA, PLUS, IF, ELSE, REVERSE, PREFIX;
terminal String     STRING_LITERAL;  

/*  Non terminals */
non terminal            func_call, func_calls, func_args, 
                        declaration, declarations, dec_args, declaration_body,
                        program_start, program_body, 
                        concat_expr, string_expr, conditional_expr,
                        if_statement, if_else_body;

/**
 *  The Grammar Rules
 */


/* Program structure */

program_start ::= program_body:body         {: System.out.println("public class Main {");
                                               System.out.println(body);
                                               System.out.println("}"); :}
                ;

program_body ::= declarations:decs func_calls:calls           {: RESULT = "public static void main(String[] args) {\n";
                                                                 RESULT += "" + calls;
                                                                 RESULT += "\n}";
                                                                 RESULT += "\n" + decs;                                      :}
                ;


/* Declarations */

declarations ::= declarations:decs declaration:dec    {: RESULT = dec  + "\n" + decs;   :}
                | declaration:dec                     {: RESULT = dec;                  :}
                ;

dec_args ::= string_expr:str COMMA dec_args:args     {: RESULT = "String " + str + ", " + args;     :}
            | string_expr:str RPAREN LCURLBRACKET    {: RESULT = "String " + str + ") {\n";         :}
            ;

declaration ::= IDENT:id LPAREN dec_args:args declaration_body:body RCURLBRACKET        {: RESULT = "public static String " + id + "(" + args;
                                                                                           RESULT += " " + body + "\n";
                                                                                           RESULT += "}";                                     :}
            | IDENT:id LPAREN RPAREN LCURLBRACKET declaration_body:body RCURLBRACKET    {: RESULT = "public static String " + id + "() {\n";
                                                                                           RESULT += "" + body + "\n";
                                                                                           RESULT += "}";                                     :}
            ;

declaration_body ::= concat_expr:expr                {: RESULT = "return " + expr + ";";      :}
                | if_statement:stmnt                 {: RESULT = stmnt;                  :}
                ;


/* Function calls */

func_calls ::= func_call:call func_calls:calls      {: RESULT = "System.out.println(" + call  + ");\n" + calls;     :}
            |  func_call:call                       {: RESULT = "System.out.println(" + call  + ");";               :}
            ;

func_args ::= func_call:call COMMA func_args:args         {: RESULT = call + ", " + args;         :}
            | string_expr:str COMMA func_args:args     {: RESULT = str + ", " + args;          :}
            | func_call:call RPAREN                       {: RESULT = call + ")";                 :}
            | string_expr:str RPAREN                      {: RESULT = str + ")";                  :}
            ;

func_call ::= IDENT:id LPAREN func_args:args         {: RESULT = id + "(" + args;        :}
            | IDENT:id LPAREN RPAREN                 {: RESULT = id + "()";              :}
            ;


/* Expressions */

concat_expr ::= string_expr:str PLUS concat_expr:expr           {: RESULT = str + " + " + expr;   :}
            | string_expr:str                                   {: RESULT = str;                  :}
            ;

string_expr ::= REVERSE string_expr:str                 {: RESULT =  "new StringBuilder(" + str + ").reverse().toString()";   :}
            | STRING_LITERAL:str                        {: RESULT = "\"" + str + "\"";         :}
            | IDENT:id                                  {: RESULT = id;         :}
            ;

conditional_expr ::= string_expr:str1 PREFIX string_expr:str2       {: RESULT = str2 + ".startsWith(" + str1 + ")"; :}
                    ;


/* If/Else Statements */

if_statement ::= IF LPAREN conditional_expr:cond RPAREN if_else_body:ifbody ELSE if_else_body:elsebody  {: RESULT = "if (" + cond + "){\n";
                                                                                 RESULT += "" + ifbody + "\n}\n";
                                                                                RESULT += "else { \n" + elsebody + "\n}";                       :}
                ;

if_else_body ::= string_expr:str          {: RESULT = "return " + str + ";"; :}
        | if_statement:stmnt                {: RESULT = stmnt; :}
        | func_call:call                    {: RESULT = "return " + call + ";"; :}
        ;
