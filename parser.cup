/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            LPAREN, RPAREN, LCURLBRACKET, RCURLBRACKET, IDENT, COMMA;
terminal String     STRING_LITERAL;        // our scanner provides numbers as strings

/*  Non terminals */
non terminal            func_call, declaration, program_start, program_body, declarations, func_calls, dec_args, func_args;
//non terminal Integer   expr;      // used to store evaluated subexpressions

/**
 *  Precedence Declarations
 */
//precedence left PLUS, MINUS;
//precedence left TIMES;

/**
 *  The Grammar Rules
 */


/*Program structure*/

program_start ::= program_body:body         {: System.out.println("public class Main() {");
                                            System.out.println(body);
                                            System.out.println("}"); :};

program_body ::= declarations:decs func_calls:calls           {: RESULT = "\tpublic static void main(String[] args) {\n";
                                                                RESULT += "" + calls;
                                                                RESULT += "\n\t}";
                                                                RESULT += "\n" + decs; :}
                ;


/*Declarations*/

declarations ::= declarations:decs declaration:dec    {: RESULT = dec  + "\n" + decs; :}
                | declaration:dec                    {: RESULT = dec; :}
                ;

dec_args ::= IDENT:id COMMA dec_args:args     {: RESULT = "String " + id + ", " + args; :}
            | IDENT:id RPAREN LCURLBRACKET    {: RESULT = "String " + id + ") {\n"; :}
            ;

declaration ::= IDENT:id LPAREN dec_args:args STRING_LITERAL:str RCURLBRACKET {: RESULT = "\tpublic static String " + id + "(" + args;
                                                                                RESULT += "\t\treturn \"" + str + "\";\n";
                                                                                RESULT += "\t}"; :}
            | IDENT:id LPAREN RPAREN LCURLBRACKET STRING_LITERAL:str RCURLBRACKET {: RESULT = "\tpublic static String " + id + "() {\n";
                                                                                    RESULT += "\t\treturn \"" + str + "\";\n";
                                                                                    RESULT += "\t}"; :}
            ;


/*Function calls*/

func_calls ::= func_call:call func_calls:calls      {: RESULT = "\t\tSystem.out.println(" + call  + ");\n\t\t" + calls; :}
            |  func_call:call                       {: RESULT = "System.out.println(" + call  + ");"; :}
            ;

func_args ::= IDENT:id COMMA func_args:args         {: RESULT = id + ", " + args; :}
            | IDENT:id RPAREN                       {: RESULT = id + ")"; :}
            ;

func_call ::= IDENT:id LPAREN func_args:args         {: RESULT = id + "(" + args + ")"; :}
            | IDENT:id LPAREN RPAREN                 {: RESULT = id + "()"; :}
            ;
